<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DataSource on Mikhail Potter</title>
    <link>https://mvpotter.github.io/mvpotter/blog/datasource/</link>
    <description>Recent content in DataSource on Mikhail Potter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright Â© 2020, Jane Doe.</copyright>
    <lastBuildDate>Fri, 31 Mar 2023 11:13:18 +0400</lastBuildDate><atom:link href="https://mvpotter.github.io/mvpotter/blog/datasource/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Route Spring transactions to master and slave</title>
      <link>https://mvpotter.github.io/mvpotter/route-spring-transactions-to-master-and-slave/</link>
      <pubDate>Fri, 31 Mar 2023 11:13:18 +0400</pubDate>
      
      <guid>https://mvpotter.github.io/mvpotter/route-spring-transactions-to-master-and-slave/</guid>
      <description>With the grow of a project there might be a need to forward read requests to slave node. Fortunately, it could be easily achieved in Spring with @Transactional annotation a bit of configuration.
Firstly, let&amp;rsquo;s define a node type. Here, we have values for master and slave only. However, the set might be extended, for example if you need separate connection pools for fast and long queries.
public enum DatabaseNodeType { MASTER, SLAVE } Then it is necessary to define a context holder to be aware which transaction is used in the specified thread.</description>
    </item>
    
  </channel>
</rss>
